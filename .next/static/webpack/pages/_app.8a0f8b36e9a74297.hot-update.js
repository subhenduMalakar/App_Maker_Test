"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/utils/toolsConfig.ts":
/*!**********************************!*\
  !*** ./src/utils/toolsConfig.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getToolsConfig: function() { return /* binding */ getToolsConfig; },\n/* harmony export */   isCategoryEnabled: function() { return /* binding */ isCategoryEnabled; },\n/* harmony export */   isSectionEnabled: function() { return /* binding */ isSectionEnabled; },\n/* harmony export */   isToolEnabled: function() { return /* binding */ isToolEnabled; },\n/* harmony export */   toggleCategory: function() { return /* binding */ toggleCategory; },\n/* harmony export */   toggleSection: function() { return /* binding */ toggleSection; },\n/* harmony export */   toggleTool: function() { return /* binding */ toggleTool; },\n/* harmony export */   updateToolsConfig: function() { return /* binding */ updateToolsConfig; }\n/* harmony export */ });\n/* harmony import */ var _config_toolsConfig_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/toolsConfig.json */ \"./src/config/toolsConfig.json\");\n\n/**\r\n * Get the current tools configuration\r\n */ function getToolsConfig() {\n    return _config_toolsConfig_json__WEBPACK_IMPORTED_MODULE_0__;\n}\n/**\r\n * Check if a specific tool is enabled\r\n * @param toolId The ID of the tool to check\r\n */ function isToolEnabled(toolId) {\n    const config = getToolsConfig();\n    // For premium/regular tools\n    if (toolId.indexOf(\"free-\") !== 0 && !toolId.startsWith(\"free\")) {\n        // Check if AI Tools are enabled first\n        if (!config.tools.aiTools.enabled) return false;\n        // Find the category and check if it's enabled\n        for(const catKey in config.tools.aiTools.categories){\n            const category = config.tools.aiTools.categories[catKey];\n            if (!category.enabled) continue;\n            // Normalize toolId for matching (remove dashes, lowercase)\n            const normalizedId = toolId.replace(/-/g, \"\").toLowerCase();\n            // Check each item in the category\n            for(const itemKey in category.items){\n                if (itemKey.toLowerCase() === normalizedId && category.items[itemKey]) {\n                    return true;\n                }\n            }\n        }\n    } else {\n        // Check if Free AI Tools are enabled first\n        if (!config.tools.freeAiTools.enabled) return false;\n        // Find the category and check if it's enabled\n        for(const catKey in config.tools.freeAiTools.categories){\n            const category = config.tools.freeAiTools.categories[catKey];\n            if (!category.enabled) continue;\n            // Convert from free-ai-document to freeAiDocument format\n            const normalizedId = toolId.replace(\"free-ai-\", \"\").replace(/-([a-z])/g, (_, letter)=>letter.toUpperCase());\n            const normalizedItemId = \"freeAi\" + normalizedId.charAt(0).toUpperCase() + normalizedId.slice(1);\n            // Check each item in the category\n            for(const itemKey in category.items){\n                if (itemKey === normalizedItemId && category.items[itemKey]) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n/**\r\n * Check if a tool category is enabled\r\n * @param categoryId The ID of the category to check\r\n * @param isFreeTools Whether the category is in free tools\r\n */ function isCategoryEnabled(categoryId) {\n    let isFreeTools = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    var _categoryGroup_categories_categoryId;\n    const config = getToolsConfig();\n    const categoryGroup = isFreeTools ? config.tools.freeAiTools : config.tools.aiTools;\n    if (!categoryGroup.enabled) return false;\n    return !!((_categoryGroup_categories_categoryId = categoryGroup.categories[categoryId]) === null || _categoryGroup_categories_categoryId === void 0 ? void 0 : _categoryGroup_categories_categoryId.enabled);\n}\n/**\r\n * Check if the entire tool section (AI Tools or Free AI Tools) is enabled\r\n * @param section 'aiTools' or 'freeAiTools'\r\n */ function isSectionEnabled(section) {\n    const config = getToolsConfig();\n    return config.tools[section].enabled;\n}\n/**\r\n * Client-side stub for updating tools config\r\n * The actual implementation is in the API route\r\n */ async function updateToolsConfig(newConfig) {\n    console.warn(\"updateToolsConfig is only available server-side\");\n    return Promise.resolve();\n}\n/**\r\n * Client-side stub for toggling tool visibility\r\n * The actual implementation is in the API route\r\n */ async function toggleTool(toolId, enabled) {\n    console.warn(\"toggleTool is only available server-side\");\n    return Promise.resolve();\n}\n/**\r\n * Client-side stub for toggling category visibility\r\n * The actual implementation is in the API route\r\n */ async function toggleCategory(categoryId, enabled) {\n    let isFreeTools = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    console.warn(\"toggleCategory is only available server-side\");\n    return Promise.resolve();\n}\n/**\r\n * Client-side stub for toggling section visibility\r\n * The actual implementation is in the API route\r\n */ async function toggleSection(section, enabled) {\n    console.warn(\"toggleSection is only available server-side\");\n    return Promise.resolve();\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    getToolsConfig,\n    isToolEnabled,\n    isCategoryEnabled,\n    isSectionEnabled,\n    updateToolsConfig,\n    toggleTool,\n    toggleCategory,\n    toggleSection\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/toolsConfig.ts\n"));

/***/ })

});