import { NextPage } from 'next';
import Head from 'next/head';
import ToolsLayout from '@/components/ToolsLayout';
import { BookText, Copy, Download, Sparkles, RefreshCw, Settings, Bookmark } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { useState } from 'react';

const AIStoryGenerator: NextPage = () => {  const [prompt, setPrompt] = useState("");
  const [generatedStory, setGeneratedStory] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [storyLength, setStoryLength] = useState<number[]>([1000]);
  const [genre, setGenre] = useState("fantasy");
  const [audience, setAudience] = useState("general");
  const [includeCharacters, setIncludeCharacters] = useState(true);
  const [includePlot, setIncludePlot] = useState(true);

  const handleGenerate = () => {
    if (prompt) {
      setIsGenerating(true);
      // In a real app, this would be an API call to an AI service
      setTimeout(() => {
        setGeneratedStory(
          "# The Adventure Begins\n\nOnce upon a time in a land far, far away, there lived a young adventurer named Alex. With bright eyes full of wonder and a heart yearning for adventure, Alex had always dreamed of exploring the mysterious forests beyond the village.\n\nThis is the beginning of a simulated AI-generated story based on your prompt. In a real implementation, this would be generated by an AI model. The story would incorporate your selected genre, audience, and other parameters.\n\nThe narrative would continue here with character development, plot twists, and an engaging storyline that follows your specified requirements."
        );
        setIsGenerating(false);
      }, 2000);
    }
  };
  return (
    <ToolsLayout>
      <Head>
        <title>AI Story Generator - AI Tools</title>
        <meta name="description" content="Create original stories with AI storytelling technology" />
      </Head>
      
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col items-center text-center mb-6">
          <BookText className="h-16 w-16 text-teal-600 mb-4" />
          <h1 className="text-3xl font-bold mb-2">AI Story Generator</h1>
          <p className="text-gray-600 max-w-2xl">
            Create original stories with our AI storytelling technology. Generate compelling narratives 
            for various genres, audiences, and purposes.
          </p>
        </div>

        <div className="max-w-5xl mx-auto">
          <Tabs defaultValue="create">
            <TabsList className="grid w-full grid-cols-2 mb-6">
              <TabsTrigger value="create">Create Story</TabsTrigger>
              <TabsTrigger value="saved">Saved Stories</TabsTrigger>
            </TabsList>
            
            <TabsContent value="create" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Story settings */}
                <div className="md:col-span-1 space-y-6">
                  <Card>
                    <CardContent className="p-4 space-y-4">
                      <div>
                        <Label htmlFor="prompt">Story Idea</Label>
                        <Textarea 
                          id="prompt"
                          placeholder="Describe your story idea..." 
                          value={prompt}
                          onChange={(e) => setPrompt(e.target.value)}
                          className="min-h-[120px]"
                        />
                      </div>
                      
                      <div>
                        <Label htmlFor="genre">Genre</Label>
                        <Select 
                          value={genre} 
                          onValueChange={setGenre}
                        >
                          <SelectTrigger id="genre">
                            <SelectValue placeholder="Select genre" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="fantasy">Fantasy</SelectItem>
                            <SelectItem value="scifi">Science Fiction</SelectItem>
                            <SelectItem value="mystery">Mystery</SelectItem>
                            <SelectItem value="romance">Romance</SelectItem>
                            <SelectItem value="adventure">Adventure</SelectItem>
                            <SelectItem value="horror">Horror</SelectItem>
                            <SelectItem value="historical">Historical</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label htmlFor="audience">Target Audience</Label>
                        <Select 
                          value={audience} 
                          onValueChange={setAudience}
                        >
                          <SelectTrigger id="audience">
                            <SelectValue placeholder="Select audience" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="children">Children</SelectItem>
                            <SelectItem value="youngAdult">Young Adult</SelectItem>
                            <SelectItem value="general">General</SelectItem>
                            <SelectItem value="adult">Adult</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <div className="flex justify-between">
                          <Label htmlFor="length">Story Length</Label>
                          <span className="text-sm text-gray-500">{storyLength[0]} words</span>
                        </div>
                        <Slider
                          id="length" 
                          value={storyLength} 
                          min={300}
                          max={5000}
                          step={100}
                          onValueChange={setStoryLength}
                          className="my-2"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium">Story Components</h4>
                        <div className="flex items-center justify-between">
                          <Label htmlFor="characters" className="cursor-pointer">Character Descriptions</Label>
                          <Switch 
                            id="characters" 
                            checked={includeCharacters}
                            onCheckedChange={setIncludeCharacters}
                          />
                        </div>
                        <div className="flex items-center justify-between">
                          <Label htmlFor="plot" className="cursor-pointer">Plot Elements</Label>
                          <Switch 
                            id="plot" 
                            checked={includePlot}
                            onCheckedChange={setIncludePlot}
                          />
                        </div>
                      </div>
                      
                      <Button 
                        onClick={handleGenerate} 
                        disabled={!prompt || isGenerating}
                        className="w-full"
                      >
                        {isGenerating ? (
                          <>
                            <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                            Crafting your story...
                          </>
                        ) : (
                          <>
                            <Sparkles className="mr-2 h-4 w-4" />
                            Generate Story
                          </>
                        )}
                      </Button>
                    </CardContent>
                  </Card>
                </div>

                {/* Output area */}
                <div className="md:col-span-2">
                  <Card className="h-full">
                    <CardContent className="p-4 h-full flex flex-col">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="font-medium">Your Story</h3>
                        <div className="flex space-x-2">
                          <Button variant="outline" size="sm">
                            <Copy className="h-3.5 w-3.5 mr-1" />
                            Copy
                          </Button>
                          <Button variant="outline" size="sm">
                            <Download className="h-3.5 w-3.5 mr-1" />
                            Download
                          </Button>
                          <Button variant="outline" size="sm">
                            <Bookmark className="h-3.5 w-3.5 mr-1" />
                            Save
                          </Button>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 rounded-md p-4 flex-grow overflow-auto">
                        {generatedStory ? (
                          <div className="prose max-w-none prose-sm md:prose-base whitespace-pre-wrap">
                            {generatedStory}
                          </div>
                        ) : (
                          <div className="h-full flex items-center justify-center text-gray-400 text-center">
                            <div>
                              <BookText className="h-8 w-8 mx-auto mb-2 opacity-50" />
                              <p>Your story will appear here</p>
                              <p className="text-sm">Start by entering a story idea and clicking Generate</p>
                            </div>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="saved">
              <Card>
                <CardContent className="p-6">
                  <div className="flex flex-col items-center justify-center py-10">
                    <BookText className="h-10 w-10 text-gray-300 mb-4" />                    <h3 className="font-medium text-gray-500 mb-2">No Saved Stories</h3>
                    <p className="text-sm text-gray-400 mb-4">
                      You haven't saved any stories yet. Generate a story and save it to see it here.
                    </p>
                    <Button variant="outline" onClick={() => {
                      const createTab = document.querySelector('[data-value="create"]') as HTMLElement;
                      if (createTab) createTab.click();
                    }}>
                      Create Your First Story
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>        </div>
      </div>
    </ToolsLayout>
  );
};

export default AIStoryGenerator;
