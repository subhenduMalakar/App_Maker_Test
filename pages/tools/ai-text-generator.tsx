import { NextPage } from 'next';
import Head from 'next/head';
import ToolsLayout from '@/components/ToolsLayout';
import { Terminal, Copy, Download, Sparkles, Edit, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { useState } from 'react';

const AITextGenerator: NextPage = () => {  const [prompt, setPrompt] = useState("");
  const [generatedText, setGeneratedText] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [textLength, setTextLength] = useState<number[]>([500]);
  const [textType, setTextType] = useState("general");

  const handleGenerate = () => {
    if (prompt) {
      setIsGenerating(true);
      // In a real app, this would be an API call to an AI service
      setTimeout(() => {
        setGeneratedText(
          "This is a simulated AI-generated text based on your prompt. In a real implementation, this would be generated by an AI model. The text would be relevant to your prompt and would match the selected style and length parameters.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam auctor, nisl eget ultricies lacinia, nisl nisl aliquam nisl, eget ultricies nisl nisl eget nisl. Nullam auctor, nisl eget ultricies lacinia, nisl nisl aliquam nisl, eget ultricies nisl nisl eget nisl."
        );
        setIsGenerating(false);
      }, 1500);
    }
  };
  return (
    <ToolsLayout>
      <Head>
        <title>AI Text Generator - AI Tools</title>
        <meta name="description" content="Generate high-quality text content with AI" />
      </Head>
      
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col items-center text-center mb-6">
          <Terminal className="h-16 w-16 text-violet-600 mb-4" />
          <h1 className="text-3xl font-bold mb-2">AI Text Generator</h1>
          <p className="text-gray-600 max-w-2xl">
            Generate high-quality text content with advanced AI technology. Create blog posts, 
            articles, product descriptions, and more.
          </p>
        </div>

        <div className="max-w-4xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Input area */}
            <div className="md:col-span-1 space-y-6">
              <Card>
                <CardContent className="p-4 space-y-4">
                  <div>
                    <Label htmlFor="prompt">Your Prompt</Label>
                    <Textarea 
                      id="prompt"
                      placeholder="Enter a prompt for the AI..." 
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      className="min-h-[150px]"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="textType">Text Type</Label>
                    <Select 
                      value={textType} 
                      onValueChange={setTextType}
                    >
                      <SelectTrigger id="textType">
                        <SelectValue placeholder="Select type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="general">General</SelectItem>
                        <SelectItem value="blog">Blog Post</SelectItem>
                        <SelectItem value="article">Article</SelectItem>
                        <SelectItem value="product">Product Description</SelectItem>
                        <SelectItem value="social">Social Media</SelectItem>
                        <SelectItem value="creative">Creative Writing</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <div className="flex justify-between">
                      <Label htmlFor="length">Text Length</Label>
                      <span className="text-sm text-gray-500">{textLength[0]} words</span>
                    </div>
                    <Slider
                      id="length" 
                      value={textLength} 
                      min={100}
                      max={2000}
                      step={100}
                      onValueChange={setTextLength}
                      className="my-2"
                    />
                  </div>
                  
                  <Button 
                    onClick={handleGenerate} 
                    disabled={!prompt || isGenerating}
                    className="w-full"
                  >
                    {isGenerating ? (
                      <>
                        <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                        Generating...
                      </>
                    ) : (
                      <>
                        <Sparkles className="mr-2 h-4 w-4" />
                        Generate Text
                      </>
                    )}
                  </Button>
                </CardContent>
              </Card>
            </div>

            {/* Output area */}
            <div className="md:col-span-2">
              <Card className="h-full">
                <CardContent className="p-4 h-full flex flex-col">
                  <div className="flex justify-between items-center mb-2">
                    <h3 className="font-medium">Generated Text</h3>
                    <div className="flex space-x-2">
                      <Button variant="outline" size="sm">
                        <Copy className="h-3.5 w-3.5 mr-1" />
                        Copy
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="h-3.5 w-3.5 mr-1" />
                        Download
                      </Button>
                      <Button variant="outline" size="sm">
                        <Edit className="h-3.5 w-3.5 mr-1" />
                        Edit
                      </Button>
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 rounded-md p-4 flex-grow overflow-auto">
                    {generatedText ? (
                      <div className="whitespace-pre-wrap">
                        {generatedText}
                      </div>
                    ) : (
                      <div className="h-full flex items-center justify-center text-gray-400 text-center">
                        <div>
                          <Sparkles className="h-8 w-8 mx-auto mb-2 opacity-50" />
                          <p>Your generated text will appear here</p>
                          <p className="text-sm">Start by entering a prompt and clicking Generate</p>
                        </div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>        </div>
      </div>
    </ToolsLayout>
  );
};

export default AITextGenerator;
